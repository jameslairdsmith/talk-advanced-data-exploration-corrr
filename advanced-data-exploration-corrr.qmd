---
format:
  revealjs: 
    slide-number: true
    css: styles.css
    slide-level: 3
    mouse-wheel: true
    execute:
      echo: true
      warning: false
    output-file: index.html
---

## Advanced data exploration with corrr {style="margin-top: 0em;"}

> James Laird-Smith

```{r}
#| include: false
old.hooks <- fansi::set_knit_hooks(knitr::knit_hooks)
options(crayon.enabled=TRUE)
```

::: {style="margin-top: 2em; margin-bottom: 1em"}
Link to slides: data-exploration-corrr.jameslairdsmith.com/ 
:::

```{r}
library(corrr)
library(magrittr)
library(dplyr)
```

## Agenda

- Old and busted: `stats::cor()`
- New hotness: `corrr::correlate()`
- More general hotness: `corrr::colpair_map()`
- Experiments: `ppcalc::`



### In the beginning ... there was `stats::cor()` {auto-animate="true"}

```{r}
mtcars[1:4]
```

### In the beginning ... there was `stats::cor()` {auto-animate="true"}

```{r}
mtcars[1:4] %>% 
  cor()
```

. . .

::: {style="margin-top: 2em"}
But `stats::cor()` returns a matrix, which isn't as easy to work with.
:::

---

### Introducing corrr

- A package for correlations in R.
- Created by Simon Jackson in 2016.
- Since been taken over by the tidymodels team at RStudio.
- Makes working with correlation values a little easier.

![](corrr-logo.png){.absolute bottom=0 right=50 width="300" height="325"}

### Using `corrr::correlate()` {auto-animate="true"}

```{r}
correlate(mtcars[1:4]) 
```

---

### Using `corrr::correlate()` {auto-animate="true"}


```{r}
correlate(mtcars[1:4]) %>%
  network_plot()
```

### Using `corrr::correlate()` {auto-animate="true"}

```{r}
correlate(mtcars[1:4]) %>% 
  shave()
```

### Using `corrr::correlate()` {auto-animate="true"}

```{r}
correlate(mtcars[1:4]) %>% 
  shave() %>%
  stretch(na.rm = T)
```

### Using `corrr::correlate()` {auto-animate="true"}

```{r}
correlate(mtcars[1:4]) %>% 
  shave() %>%
  stretch(na.rm = T) %>% 
  dplyr::arrange(r)
```

###

But this is still limited.

- Trivially, it only works with correlations.
  - This means it's confined to only numeric-numeric comparisons.
  - Even for numeric-numeric pairs, correlations can only detect linear relationships.
  - Correlations aren't the only useful measure of association.
  
  
## Enter: `corrr::colpair_map()`

- A function I contributed to corrr.
- Just like `corrr::correlate()`, it takes data as the first argument and then an arbitrary function (`.f`) as the second argument.

```{r}
#| eval: false
colpair_map(.data, .f, ..., .diagonal = NA)
```

- The name is a combination of `colpair`, meaning column pairs and `map`, which is like "apply".

- Now you can run any function you like.

### Application: covariance matrix {auto-animate="true"}

```{r}
mtcars[1:4] %>% 
  colpair_map(stats::cov)
```

### Application: covariance matrix {auto-animate="true"}

```{r}
mtcars[1:4] %>% 
  colpair_map(stats::cov) %>% 
  shave()
```

